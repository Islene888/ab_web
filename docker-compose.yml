version: '3.8'

services:
  # ... (backend, frontend, postgres 服务保持不变)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5001:5000"
    environment:
      - FLASK_APP=backend/main.py
    env_file:
      - ./backend/.env
    restart: on-failure

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: always

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    restart: always

  airflow-webserver:
    image: apache/airflow:2.7.3
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__WEBSERVER__SECRET_KEY: mysecretkey
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      PYTHONPATH: /opt/airflow
      # --- 在这里添加 pymysql ---
      _PIP_ADDITIONAL_REQUIREMENTS: "pymysql"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./backend:/opt/airflow/backend
      - ./logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.7.3
    restart: always
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      PYTHONPATH: /opt/airflow
      # --- 在这里添加 pymysql ---
      _PIP_ADDITIONAL_REQUIREMENTS: "pymysql"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./backend:/opt/airflow/backend
      - ./logs:/opt/airflow/logs
    command: scheduler

volumes:
  postgres-db-volume: